#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset

which aws > /dev/null || (echo "Missing dependency: aws" && false)
which jq > /dev/null || (echo "Missing dependency: jq" && false)

script=$(basename "$0")

function usage {
	echo "Assumes a role and saves temporary credentials as default."
	echo
	echo "Usage:"
	echo "$ ${script} <profile>"
	exit 1
}

profile=${1:-}

if [[ "${profile}" == "" ]]; then
	echo "!!! First arg must be an AWS profile (in ~/.aws)!"
	echo
	usage
fi

export AWS_PROFILE=${profile}

# Make sure they don't interfere.
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_SESSION_TOKEN=

# Let the AWS CLI assume a role and prompt for MFA if necessary.
user_id=$(aws sts get-caller-identity | jq --raw-output '.UserId')

# Fetch credentials from cache.
creds=
AWS_DIR=~/.aws
AWS_CACHE_DIR=${AWS_DIR}/cli/cache
for file in $(ls $AWS_CACHE_DIR/*.json); do
	contents=$(cat $file)
	role_id=$(echo $contents | jq --raw-output '.AssumedRoleUser.AssumedRoleId')
	if [[ $user_id == $role_id ]]; then
		creds=$(echo $contents | jq --raw-output '.Credentials')
		break
	fi
done

if [[ "${creds}" == "" ]]; then
	echo "!!! Could not assume role!"
	exit 2
fi

access_key_id=$(echo $creds | jq --raw-output '.AccessKeyId')
secret_access_key=$(echo $creds | jq --raw-output '.SecretAccessKey')
session_token=$(echo $creds | jq --raw-output '.SessionToken')

# Ensure final newlines (`aws configure` messes up otherwise).
[[ -n $(tail -c1 "${AWS_DIR}/config") ]] && echo '' >> "${AWS_DIR}/config"
[[ -n $(tail -c1 "${AWS_DIR}/credentials") ]] && echo '' >> "${AWS_DIR}/credentials"

# Saves to ~/.aws/credentials:
aws configure set default.aws_access_key_id ${access_key_id}
aws configure set default.aws_secret_access_key ${secret_access_key}
aws configure set default.aws_session_token ${session_token}

# Saves to ~/.aws/config:
aws configure set default.managed_by ${script}
aws configure set default.latest_assume ${profile}

echo "Assumed role for profile: ${profile}"
