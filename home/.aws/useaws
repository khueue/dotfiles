#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset

script=$(basename "$0")

function usage {
	echo "Set active AWS credentials from a user or a role."
	echo
	echo "Works seemlessly with the CLI and SDKs, since the desired credentials"
	echo "are copied into the default in ~/.aws/credentials."
	echo
	echo "Uses the CLI for any heavy lifting, so features like MFA etc."
	echo "should just work."
	echo
	echo "IMPORTANT: Move your default credentials before using, since this"
	echo "script will maintain that section. Keep your users and roles in"
	echo "named sections."
	echo
	echo "Usage:"
	echo "$ ${script} role <profile in ~/.aws/config>"
	echo "$ ${script} user <profile in ~/.aws/credentials>"
	echo "$ ${script} whoami (shows active credentials)"
	echo "$ ${script} no (unsets active credentials)"
	exit 1
}

AWS_DIR=~/.aws
AWS_CACHE_DIR=${AWS_DIR}/cli/cache

# Check dependencies.
[[ -d ${AWS_DIR} ]] || (echo "Missing ${AWS_DIR} dir" && false)
which aws > /dev/null || (echo "Missing dependency: aws" && false)
which jq > /dev/null || (echo "Missing dependency: jq" && false)

if [[ "${AWS_ACCESS_KEY_ID:-}" != "" ]]; then
	echo "WARNING: AWS_ACCESS_KEY_ID is already set and may cause unwanted behavior"
fi
if [[ "${AWS_SECRET_ACCESS_KEY:-}" != "" ]]; then
	echo "WARNING: AWS_SECRET_ACCESS_KEY is already set and may cause unwanted behavior"
fi
if [[ "${AWS_SESSION_TOKEN:-}" != "" ]]; then
	echo "WARNING: AWS_SESSION_TOKEN is already set and may cause unwanted behavior"
fi
if [[ "${AWS_PROFILE:-}" != "" ]]; then
	echo "WARNING: AWS_PROFILE is already set and may cause unwanted behavior"
fi

function write_signature {
	# Saves to ~/.aws/config:
	aws configure set default.managed_by "${script}"
}

# Ensure final newlines in files (`aws configure` messes up otherwise).
[[ -n $(tail -c1 "${AWS_DIR}/config") ]] && echo '' >> "${AWS_DIR}/config"
[[ -n $(tail -c1 "${AWS_DIR}/credentials") ]] && echo '' >> "${AWS_DIR}/credentials"

action=${1:-}

if [[ "${action}" == "" ]]; then
	usage
fi

if [[ "${action}" == "no" ]]; then
	# Saves to ~/.aws/credentials:
	aws configure set default.aws_access_key_id ""
	aws configure set default.aws_secret_access_key ""
	aws configure set default.aws_session_token ""

	write_signature

	echo "Cleared default credentials"
	exit 0
fi

# Fetch region to use for STS endpoint.
sts_region=$(aws configure get ${script}.sts_region || echo)
if [[ "${sts_region}" == "" ]]; then
	echo "--- NOTE: To optimize me, tell me a region close to you:"
	echo "--- For example: aws configure set sts_region eu-west-1 --profile ${script}"
	echo
else
	export AWS_REGION=${sts_region}
fi

if [[ "${action}" == "whoami" ]]; then
	aws sts get-caller-identity

	exit 0
fi

profile=${2:-}

if [[ "${profile}" == "" ]]; then
	echo "!!! Second arg must be an AWS profile (in ~/.aws)!"
	echo
	usage
fi

if [[ "${action}" == "user" ]]; then
	# Grab the desired credentials.
	access_key_id=$(aws configure get ${profile}.aws_access_key_id)
	secret_access_key=$(aws configure get ${profile}.aws_secret_access_key)
	session_token=$(aws configure get ${profile}.aws_session_token || echo)

	# Saves to ~/.aws/credentials:
	aws configure set default.aws_access_key_id "${access_key_id}"
	aws configure set default.aws_secret_access_key "${secret_access_key}"
	aws configure set default.aws_session_token "${session_token}"

	write_signature

	echo "Set default credentials from user: ${profile}"
	exit 0
fi

if [[ "${action}" == "role" ]]; then
	# Let the AWS CLI assume a role for us (using exported profile), prompt
	# for MFA if necessary, and save credentials to cache.
	export AWS_PROFILE=${profile}
	user_id=$(aws sts get-caller-identity | jq --raw-output '.UserId')

	# Fetch credentials from cache.
	creds=
	for file in $(ls $AWS_CACHE_DIR/*.json); do
		contents=$(cat $file)
		role_id=$(echo $contents | jq --raw-output '.AssumedRoleUser.AssumedRoleId')
		if [[ $user_id == $role_id ]]; then
			creds=$(echo $contents | jq --raw-output '.Credentials')
			break
		fi
	done

	if [[ "${creds}" == "" ]]; then
		echo "!!! Could not assume role!"
		exit 2
	fi

	access_key_id=$(echo $creds | jq --raw-output '.AccessKeyId')
	secret_access_key=$(echo $creds | jq --raw-output '.SecretAccessKey')
	session_token=$(echo $creds | jq --raw-output '.SessionToken')

	# Saves to ~/.aws/credentials:
	aws configure set default.aws_access_key_id "${access_key_id}"
	aws configure set default.aws_secret_access_key "${secret_access_key}"
	aws configure set default.aws_session_token "${session_token}"

	write_signature

	echo "Set default credentials from role: ${profile}"
	exit 0
fi

echo "!!! Unknown arguments"
echo
usage
